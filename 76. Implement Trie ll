class TrieNode{
    char data;
    boolean isTerminating;
    TrieNode children[];

    //Initialize your data structure here

    TrieNode(char c) {
        //Write your code here
        this.data=c;
        children=new TrieNode[26];
        isTerminating=false;
    }
}
public class Trie {
    private static TrieNode root;
    public Trie(){
        root=new TrieNode('\0');
    }


    //Inserts a word into the trie

    public static void insert(String word) {
        //Write your code here
        insert(root,word);
    }
    public static void insert(TrieNode root,String word){
        if(word.length()==0){
            root.isTerminating=true;
            return;
        }
        int childIndex=word.charAt(0)-'a';
        TrieNode child=root.children[childIndex];
        if(child==null){
            child=new TrieNode(word.charAt(0));
            root.children[childIndex]=child;
        }
        insert(child,word.substring(1));
    }

    //Returns if the word is in the trie

    public static boolean search(String word) {
        //Write your code here
        return search(root,word);
    }
    public static boolean search(TrieNode root,String word){
        if(word.length()==0){
            return root.isTerminating;
        }
        int childIndex=word.charAt(0)-'a';
        TrieNode child=root.children[childIndex];
        if(child==null){
            return false;
        }
        return search(child,word.substring(1));
    }
    
    //Returns if there is any word in the trie that starts with the given prefix

    public static boolean startsWith(String prefix) {
        //Write your code here
        return startsWith(root,prefix);

    }
    public static boolean startsWith(TrieNode root,String word){
        if(word.length()==0){
            return true;
        }
        int childIndex=word.charAt(0)-'a';
        TrieNode child=root.children[childIndex];
        if(child==null){
            return false;
        }
        return startsWith(child,word.substring(1));
    }
}
