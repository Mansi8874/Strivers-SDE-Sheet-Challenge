public class Solution {
	public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
		// Write your code here!
		if(root==null){
	        List<Integer> le=new ArrayList<>();
	        return le;
	    }
	    List<Integer> ans=new ArrayList<>();
	    Stack<BinaryTreeNode> s1=new Stack<>();
	    Stack<BinaryTreeNode> s2=new Stack<>();
	    s1.push(root);
	    while(!s1.isEmpty() || !s2.isEmpty()){
	        if(s2.isEmpty()){
	            while(!s1.isEmpty()){
	                BinaryTreeNode<Integer> temp=s1.pop();
	                ans.add(temp.data);
	                if(temp.left!=null){
	                    s2.push(temp.left);
	                }
	                if(temp.right!=null){
	                    s2.push(temp.right);
	                }
	            }
	        }
	        if(s1.isEmpty()){
	            while(!s2.isEmpty()){
	                BinaryTreeNode<Integer> temp=s2.pop();
	                ans.add(temp.data);
	                if(temp.right!=null){
	                    s1.push(temp.right);
	                }
	                if(temp.left!=null){
	                    s1.push(temp.left);
	                }
	            }
	        }
	    }
	    return ans;
	}
}
