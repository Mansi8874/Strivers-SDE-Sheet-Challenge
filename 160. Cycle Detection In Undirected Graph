import java.util.*;
public class Solution {
    
    public static String cycleDetection(int[][] edges, int n, int m) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
        for(int i=0; i<=n; i++){
            graph.add(new ArrayList<Integer>()); 
        }
        for(int i=0; i<m; i++){
            graph.get(edges[i][0]).add(edges[i][1]);
            graph.get(edges[i][1]).add(edges[i][0]);
        }
        boolean vis[] =new boolean[n+1];
        for(int i=1; i<=n; i++){
            if(vis[i]==false){
                if(dfs(vis, i, graph,-1)){
                    return new String("Yes");
                }
            }
        }
        return new String("No");
    }
    static boolean dfs(boolean []vis,int node, ArrayList<ArrayList<Integer>> adj,int par){
        if(vis[node]) 
        return true;        
        vis[node] = true;        
        for(int adjNode : adj.get(node)){            
            if(!vis[adjNode]){                
                if(dfs(vis,adjNode,adj,node)){                    
                    return true;                
                }            
            }else if(adjNode!=par){
                return true;
            }        
        }        
        return false;  
    }    
}
