public class Solution {
	public static ArrayList<Integer> traverseBoundary(TreeNode root){
		ArrayList<Integer> list=new ArrayList<>();
	    if(root==null){
	        return list;
	    }
	    list.add(root.data);
	    if(root.left==null && root.right==null){
	        return list;
	    }
	    left(root.left,list);
	    leafNode(root,list);
	    right(root.right,list);
	    return list;
	}
	public static void left(TreeNode root,ArrayList<Integer> list){
	    if(root==null){
	        return;
	    }
	    if(root.left==null && root.right==null){
	        return;
	    }
	    list.add(root.data);
	    if(root.left!=null){
	        left(root.left,list);
	    }else{
	        left(root.right,list);
	    }
	}
	public static void leafNode(TreeNode root,ArrayList<Integer> list){
	    if(root==null){
	        return;
	    }
	    if(root.left==null && root.right==null){
	        list.add(root.data);
	        return;
	    }
	    leafNode(root.left,list);
	    leafNode(root.right,list);
	}
	public static void right(TreeNode root,ArrayList<Integer> list){
	    if(root==null){
	        return;
	    }
	    if(root.left==null && root.right==null){
	        return;
	    }
	    if(root.right!=null){
	        right(root.right,list);
	    }else{
	        right(root.left,list);
	    }
	    list.add(root.data);
	}
}
